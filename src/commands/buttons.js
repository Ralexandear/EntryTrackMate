
class Buttons {
  constructor (user){
    this.user = user
    this.language = user.language
    this.inline = new InlineButtons(user)
  }
  get selectLanguage(){
    return [
      [{text: 'üá¨üáß English'}],
      [{text: 'üáßüáæ –ë–µ–ª–∞—Ä—É—Å–∏'}, {text: 'üá∑üá∫ –†—É—Å—Å–∫–∏–π'}],
      [{text: 'üá∑üá∏ Srpski'}, {text: 'üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π'}],
    ]
  }
  get getTimezone(){
    let language = this.language
    let text = 'üìç ';
    
    if (language === 'ru') text += '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π'
    else if (language === 'uk') text += '–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—î—é'
    else if (language === 'be') text += '–ü–∞–¥–∑—è–ª—ñ—Ü—Ü–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π'
    else if (language === 'rs') text += 'Deli lokaciju'
    else text += "Share Location"

    return [
      [{text: '‚≠êÔ∏è Asia/Tbilisi'}, {text: '‚≠êÔ∏è Europe/Belgrade'}],
      [{text, request_location: true}],    
    ]
  }
  get editTimezone (){
    const buttons = this.getTimezone;
    buttons.push([this.backButton])
    return buttons
  }
  get editDuration(){
    return this.inline.convertToInline(this.selectDuration)
  }
  get selectDuration(){
    switch (this.language){
      default:
      case 'en':
        return [
          [{text: 'üü¢ 30 Days'},],
          [{text: 'üü° 60 Days'}, {text: 'üü† 90 Days'}],
          [{text: 'üü£ 180 Days'}, {text: 'üî¥ 365 Days'}], 
        ]
      case 'ru':
        return [
          [{text: 'üü¢ 30 –î–Ω–µ–π'}],
          [{text: 'üü° 60 –î–Ω–µ–π'}, {text: 'üü† 90 –î–Ω–µ–π'}],
          [{text: 'üü£ 180 –î–Ω–µ–π'}, {text: 'üî¥ 365 –î–Ω–µ–π'}], 
        ]
      case 'uk':
        return [
          [{text: 'üü¢ 30 –î–Ω—ñ–≤'}], 
          [{text: 'üü° 60 –î–Ω—ñ–≤'}, {text: 'üü† 90 –î–Ω—ñ–≤'}],
          [{text: 'üü£ 180 –î–Ω—ñ–≤'}, {text: 'üî¥ 365 –î–Ω—ñ–≤'}], 
        ]
      case 'be':
        return [
          [{text: 'üü¢ 30 –î–∑—ë–Ω'}],
          [{text: 'üü° 60 –î–∑—ë–Ω'}, {text: 'üü† 90 –î–∑—ë–Ω'}],
          [{text: 'üü£ 180 –î–∑—ë–Ω'}, {text: 'üî¥ 365 –î–∑—ë–Ω'}], 
        ]
      case 'rs':
        return [
          [{text: 'üü¢ 30 Dana'}],
          [{text: 'üü° 60 Dana'}, {text: 'üü† 90 Dana'}],
          [{text: 'üü£ 180 Dana'}, {text: 'üî¥ 365 Dana'}], 
        ]
    }
  }
  get menu (){
    return [
      [this._enterButton], [this._manualButton],
      [this._statusButton, this._settingsButton]
    ]
  }
  get _enterButton(){
    switch (this.language){
      default:
        case 'en':
          return {text: 'üöó Mark entry'};
        case 'ru':
          return {text: 'üöó –û—Ç–º–µ—Ç–∏—Ç—å –≤—ä–µ–∑–¥'};
        case 'uk':
          return {text: "üöó –í—ñ–¥–∑–Ω–∞—á–∏—Ç–∏ –≤'—ó–∑–¥"}
        case 'be':
          return {text: 'üöó –ê–¥–∑–Ω–∞—á—ã—Ü—å —É–µ–∑–¥'}
        case 'rs':
          return {text: 'üöó Oznaƒçite unos'}
    }
  }
  get _manualButton(){
    switch (this.language){
      default:
        case 'en':
          return {text: `üìÖ Manually specify the date of entry`};
        case 'ru':
          return {text: `üìÖ –í—Ä—É—á–Ω—É—é —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É –≤—ä–µ–∑–¥–∞`};
        case 'uk':
          return {text: `üìÖ –í—Ä—É—á–Ω—É –≤–∫–∞–∑–∞—Ç–∏ –¥–∞—Ç—É –≤'—ó–∑–¥—É`}
        case 'be':
          return {text: `üìÖ –£—Ä—É—á–Ω—É—é –ø–∞–∑–Ω–∞—á—ã—Ü—å –¥–∞—Ç—É —û–µ–∑–¥—É`}
        case 'rs':
          return {text: `üìÖ Ruƒçno odredite datum unosa`}
    }
  }
  get _statusButton(){
    switch (this.language){
      default:
        case 'en':
          return {text: 'üîÑ Status'};
        case 'ru':
          return {text: 'üîÑ –°—Ç–∞—Ç—É—Å'};
        case 'uk':
          return {text: 'üîÑ –°—Ç–∞—Ç—É—Å'}
        case 'be':
          return {text: 'üîÑ –°—Ç–∞—Ç—É—Å'}
        case 'rs':
          return {text: 'üîÑ Status'}
    }
  }
  get _settingsButton(){
    switch (this.language){
      default:
        case 'en':
          return {text: 'üîß Settings'};
        case 'ru':
          return {text: 'üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏'};
        case 'uk':
          return {text: 'üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è'}
        case 'be':
          return {text: 'üîß –ù–∞–ª–∞–¥—ã'}
        case 'rs':
          return {text: 'üîß Pode≈°avanja'}
    }
  }
  get activeSession(){
    return [
      [this.inline.newEntry],
      [this.inline.cancel]
    ]
  }
  get informationMessage (){
    return this.inline.daysLeft
  }
  get acceptEntry (){
    return this.inline.daysLeft
  }
  // get enterDateManually (){
  //   return [[this.backButton]]
  // }
  get backButton(){
    switch (this.language){
      default:
        case 'en':
          return {text: '‚Ü™Ô∏è Back'};
        case 'ru':
          return {text: '‚Ü™Ô∏è –ù–∞–∑–∞–¥'};
        case 'uk':
          return {text: '‚Ü™Ô∏è –ù–∞–∑–∞–¥'}
        case 'be':
          return {text: '‚Ü™Ô∏è –ù–∞–∑–∞–¥'}
        case 'rs':
          return {text: '‚Ü™Ô∏è Nazad'}
    }
  }
  get settings (){
    return this.inline.settings
  }
  get editLanguage (){
    return this.inline.convertToInline(this.selectLanguage)
  }

   
}

class InlineButtons {
  constructor (user){
    this.user = user
    this.language = user.language
  }
  convertToInline(keyboard){
    return keyboard.map(row => row.map(e => ({callback_data: e.text, text: e.text})))
  }
  get daysLeft (){
    const
      user = this.user,
      language = this.language,
      currentDate = getCurrentDate_({user}),
      timeDifference = new Date(user.dateEnd) - currentDate,
      daysLeft = getDayDifference_(timeDifference);
    
    if (daysLeft >= 0){
      var text = daysLeft > 10 ? '‚è≥ ' : '‚åõÔ∏è ';
      
      if (language === 'ru') text += '–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:'
      else if (language === 'uk') text += '–ó–∞–ª–∏—à–∏–ª–æ—Å—å –¥–Ω—ñ–≤:'
      else if (language === 'be') text += '–ó–∞—Å—Ç–∞–ª–æ—Å—è –¥–∑—ë–Ω:'
      else if (language === 'rs') text += 'Preostali dani:'
      else text += `Days left:`
    } else {
      var text = '‚ùóÔ∏è '

      if (language === 'ru') text += '–û–ø–æ–∑–¥–∞–Ω–∏–µ, –¥–Ω–µ–π:'
      else if (language === 'uk') text += '–ó–∞–ø—ñ–∑–Ω–µ–Ω–Ω—è, –¥–Ω—ñ–≤:'
      else if (language === 'be') text += '–°–ø–∞–∑–Ω–µ–Ω–Ω–µ, –¥–∑—ë–Ω:'
      else if (language === 'rs') text += 'Ka≈°njenje, dani:'
      else text += `Delay, days:`
    }
    
    return [[{text: `${text} ${Math.abs(daysLeft)}`, callback_data: 'daysLeft'}]];
  }
  get cancel(){
    let language = this.language
    let text;
    
    if (language === 'ru') text = '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å'
    else if (language === 'uk') text = '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏'
    else if (language === 'be') text = '‚ùå –ê–¥–º—è–Ω—ñ—Ü—å'
    else if (language === 'rs') text = '‚ùå Otka≈æi'
    else text = '‚ùå Cancel'

    return {text, callback_data: 'cancel'}
  }
  get newEntry (){
    let language = this.language
    let text;
    
    if (language === 'ru') text = '‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –Ω–æ–≤—ã–π –≤—ä–µ–∑–¥'
    else if (language === 'uk') text = `‚úÖ –í—ñ–¥–∑–Ω–∞—á–∏—Ç–∏ –Ω–æ–≤–∏–π –≤'—ó–∑–¥`
    else if (language === 'be') text = '‚úÖ –ê–¥–∑–Ω–∞—á—ã—Ü—å –Ω–æ–≤—ã —û–µ–∑–¥'
    else if (language === 'rs') text = '‚úÖ Oznaƒçi novi unos'
    else text = '‚úÖ Mark new entry'

    return {text, callback_data: 'markEntry'}
  }
  acceptManualDate (data){
    let language = this.language
    let text;
    
    if (language === 'ru') text = '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'
    else if (language === 'uk') text = '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏'
    else if (language === 'be') text = '‚úÖ –ü–∞—Ü–≤–µ—Ä–¥–∑—ñ—Ü—å'
    else if (language === 'rs') text = '‚úÖ Potvrdi'
    else text = '‚úÖ Confirm'

    return [
      [{text, callback_data: `accept/${data}`}],
      [this.cancel]
    ]
  }
  get askToCloseSession (){
    let language = this.language
    let text

    if (language === 'ru') text = '‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–µ–∑–¥'
    else if (language === 'uk') text = '‚úÖ –í—ñ–¥–∑–Ω–∞—á–∏—Ç–∏ –≤–∏—ó–∑–¥'
    else if (language === 'be') text = '‚úÖ –ê–¥–∑–Ω–∞—á—ã—Ü—å –≤—ã–µ–∑–¥'
    else if (language === 'rs') text = '‚úÖ Oznaƒçi odlazak'
    else text = '‚úÖ Mark departure'

    return [
      [{text, callback_data: 'closeSession'}],
      [this.cancel]
    ]
  }
  get settings (){
    return [
      [this._intervalButton],
      [this._timezoneButton],
      [this._languageButton]
    ]
  }
  get _intervalButton(){
    let language = this.language
    let text;
    
    if (language === 'ru') text = '‚è±Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª'
    else if (language === 'uk') text = '‚è±Ô∏è –ó–º—ñ–Ω–∏—Ç–∏ —ñ–Ω—Ç–µ—Ä–≤–∞–ª'
    else if (language === 'be') text = '‚è±Ô∏è –ó–º—è–Ω—ñ—Ü—å —ñ–Ω—Ç—ç—Ä–≤–∞–ª'
    else if (language === 'rs') text = '‚è±Ô∏è Interval izmene'
    else text = '‚è±Ô∏è Change interval'

    return {text, callback_data: 'editDuration'}
  }
  get _timezoneButton(){
    let language = this.language
    let text;
    
    if (language === 'ru') text = 'üåç –ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å'
    else if (language === 'uk') text = 'üåç –ó–º—ñ–Ω–∏—Ç–∏ —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å'
    else if (language === 'be') text = 'üåç –ó–º—è–Ω—ñ—Ü—å –≥–∞–¥–∑—ñ–Ω–Ω—ã –ø–æ—è—Å'
    else if (language === 'rs') text = 'üåç Promeni vremensku zonu'
    else text = 'üåç Change time zone'

    return {text, callback_data: 'editTimezone'}
  }
  get _languageButton(){
    let language = this.language
    let text;
    
    if (language === 'ru') text = 'üá∑üá∫ –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫'
    else if (language === 'uk') text = 'üá∫üá¶ –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É'
    else if (language === 'be') text = 'üáßüáæ –ó–º—è–Ω—ñ—Ü—å –º–æ–≤—É'
    else if (language === 'rs') text = 'üá∑üá∏ –ü—Ä–æ–º–µ–Ω–∏—Ç–µ —ò–µ–∑–∏–∫'
    else text = 'üá¨üáß Change language'

    return {text, callback_data: 'editLanguage'}
  }
}
 